[package]
name = "stellar-core"
version = "0.1.0"
edition = "2021"
rust-version = "1.79.0"
publish = false

[lib]
name = "rust_stellar_core"
crate-type = ["staticlib"]

[dependencies]
log = "=0.4.19"
tracy-client = { version = "=0.16.4", features = ["enable"], default-features = false, optional = true}
cxx = "=1.0.97"
base64 = "=0.13.1"
rustc-simple-version = "=0.1.0"
# NB: this must match the same rand version used by soroban (but the tooling
# will complain if it does not match)
rand = "=0.8.5"

petgraph = "=0.6.4"
toml = "=0.7.8"
itertools = "=0.11.0"

# Stellar-core supports multiple versions of the Soroban host linked in
# simultaneously. Each host is labeled with the _maximum_ protocol that it
# supports. The minimum protocol supported by each host is implicitly one more
# than the less-higher-numbered host's maximum protocol, though in some cases a
# host may also be configured with an explicit minimum supported protocol, in
# which case we have to keep extra hosts around to fill in any gaps in support.
#
# As an example: if we have hosts labeled -p21 and -p23, then the -p21 host will
# be used to apply ledgers with protocol 20 and 21, and the -p23 host will be
# used to apply ledgers with protocol 22 and 23.
#
# We add new hosts when performing a protocol upgrade. This allows us to hold
# back any changes to the host's dependencies to the next protocol transition
# and then simultaneously transition the entire network from one set of
# dependencies to another at the (consensus) protocol upgrade boundary.
#
# We remove hosts -- when possible -- _after_ a protocol upgrade, once no more
# ledgers with the previous protocol N-1 are being closed, and only when we have
# convinced ourselves that the host everyone is now running, that supports the
# new protocol N, can also faithfully replay all ledgers recorded under the
# previous protocol N-1. If there is any divergence during replay, then either
# the protocol N host has to be patched with some backward-compatibility code,
# or else we have to keep the protocol N-1 host around indefinitely. If we can
# get a clean replay with the new protocol N host, then we can remove the
# protocol N-1 host from the codebase.
#
# Each additional copy of the soroban host adds a small amount of complexity to
# the build and about 1.5MB of object code to the resulting binary. So we want
# to keep the number of hosts down when and if it's easy to, but having the
# number grow gradually is also not the end of the world.

[dependencies.soroban-env-host-p22]
version = "=22.0.0"
git = "https://github.com/sisuresh/rs-soroban-env"
package = "soroban-env-host"
rev = "81605c6725668f0c2c4315eb6710a3a95238e443"

[dependencies.soroban-env-host-p21]
version = "=21.2.0"
git = "https://github.com/stellar/rs-soroban-env"
package = "soroban-env-host"
rev = "8809852dcf8489f99407a5ceac12625ee3d14693"

# The test wasms and synth-wasm crate should usually be taken from the highest
# supported host, since test material usually just grows over time.

[dependencies.soroban-test-wasms]
version = "=22.0.0"
git = "https://github.com/sisuresh/rs-soroban-env"
rev = "81605c6725668f0c2c4315eb6710a3a95238e443"

[dependencies.soroban-synth-wasm]
version = "=22.0.0"
git = "https://github.com/sisuresh/rs-soroban-env"
rev = "81605c6725668f0c2c4315eb6710a3a95238e443"

[dependencies.cargo-lock]
version = "=9.0.0"
git = "https://github.com/rustsec/rustsec"
rev = "a5c69fc6e4b6068b43d7143f3a2f68c3f3de37d8"
features = ["dependency-tree"]

[features]

# The tracy feature should enable the tracy features of all supported hosts.
tracy = ["dep:tracy-client", "soroban-env-host-p21/tracy", "soroban-env-host-p22/tracy"]

# The "vnext" feature enables not-yet-released features that (a) break protocol
# but (b) are still under development, in between protocol releases. This
# feature is not enabled by default, and is only intended for temporary use when
# staging work across intra-protocol releases.
core-vnext = ["soroban-env-host-p22/next"]
